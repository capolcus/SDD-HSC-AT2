import tkinter as tk
from tkinter import messagebox
import customtkinter as ctk

# Path to the image file
IMAGE_PATH = '/mnt/data/skeletal_system.jpg'

# Data structures for systems and quizzes
systems_info = {
    'Skeletal': {
        'image': IMAGE_PATH,
        'clickable_areas': [
            (120, 30, 170, 80, "Skull"), 
            (90, 90, 210, 150, "Ribcage"),
            (110, 340, 190, 390, "Pelvis"),
            (70, 160, 130, 220, "Left Humerus"),
            (170, 160, 230, 220, "Right Humerus"),
            (60, 400, 120, 460, "Left Femur"),
            (180, 400, 240, 460, "Right Femur")
        ]
    }
}

quiz_data = {
    'Skeletal': [
        {'question': "What is the largest bone in the human body?", 'options': ['Skull', 'Femur', 'Humerus'], 'answer': 'Femur'}
    ]
}

user_progress = {'Skeletal': 0}

# User authentication (Placeholder)
def authenticate_user(username, password):
    if username == "admin" and password == "password":
        return True
    return False

# Main application window
class AnatomyApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Anatomy Teaching Software")
        self.geometry("800x600")
        self.user_authenticated = False
        self.user_login()

    def user_login(self):
        for widget in self.winfo_children():
            widget.destroy()

        self.username_entry = ctk.CTkEntry(self, placeholder_text="Username")
        self.username_entry.pack(pady=10)

        self.password_entry = ctk.CTkEntry(self, placeholder_text="Password", show="*")
        self.password_entry.pack(pady=10)

        login_button = ctk.CTkButton(self, text="Login", command=self.verify_login)
        login_button.pack(pady=10)

    def verify_login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if authenticate_user(username, password):
            self.user_authenticated = True
            self.main_menu()
        else:
            messagebox.showerror("Error", "Invalid credentials")

    def main_menu(self):
        for widget in self.winfo_children():
            widget.destroy()

        buttons = [
            ("Skeletal System", self.skeletal_system),
            ("Muscular System", self.muscular_system),
            ("Quiz", self.quiz),
            ("Quit", self.quit)
        ]

        for text, command in buttons:
            button = ctk.CTkButton(self, text=text, command=command)
            button.pack(pady=10)

    def show_system_info(self, system):
        new_window = ctk.CTkToplevel(self)
        new_window.title(system)
        new_window.geometry("800x600")

        system_data = systems_info[system]
        image_path = system_data['image']
        clickable_areas = system_data['clickable_areas']

        canvas = tk.Canvas(new_window)
        img = tk.PhotoImage(file=image_path)
        canvas.create_image(0, 0, anchor=tk.NW, image=img)
        canvas.pack(fill=tk.BOTH, expand=True)

        def on_canvas_click(event):
            x, y = event.x, event.y
            for area in clickable_areas:
                x1, y1, x2, y2, info = area
                if x1 <= x <= x2 and y1 <= y <= y2:
                    messagebox.showinfo("Info", info)

        canvas.bind("<Button-1>", on_canvas_click)

    def skeletal_system(self):
        self.show_system_info('Skeletal')

    def muscular_system(self):
        messagebox.showinfo("Info", "Muscular System module is under development.")

    def quiz(self):
        for widget in self.winfo_children():
            widget.destroy()

        quizzes = quiz_data.keys()
        for system in quizzes:
            button = ctk.CTkButton(self, text=system, command=lambda s=system: self.take_quiz(s))
            button.pack(pady=10)

        back_button = ctk.CTkButton(self, text="Back", command=self.main_menu)
        back_button.pack(pady=10)

    def take_quiz(self, system):
        quiz_window = ctk.CTkToplevel(self)
        quiz_window.title(f"{system} Quiz")
        quiz_window.geometry("800x600")

        questions = quiz_data[system]
        score = 0
        question_index = 0

        def show_question():
            nonlocal question_index
            if question_index < len(questions):
                question_frame = QuestionFrame(quiz_window, questions[question_index], check_answer)
                question_frame.pack(pady=20)
            else:
                user_progress[system] = score
                messagebox.showinfo("Quiz Completed", f"You scored {score}/{len(questions)}")
                quiz_window.destroy()

        def check_answer(selected_option):
            nonlocal question_index, score
            if selected_option == questions[question_index]['answer']:
                score += 1
            question_index += 1
            show_question()

        show_question()

    def show_progress(self):
        progress_window = ctk.CTkToplevel(self)
        progress_window.title("Progress")
        progress_window.geometry("400x300")

        for system, score in user_progress.items():
            label = ctk.CTkLabel(progress_window, text=f"{system}: {score}")
            label.pack(pady=10)

class QuestionFrame(ctk.CTkFrame):
    def __init__(self, master, question_data, check_answer_callback):
        super().__init__(master)
        self.question_data = question_data
        self.check_answer_callback = check_answer_callback
        self.create_widgets()

    def create_widgets(self):
        question_label = ctk.CTkLabel(self, text=self.question_data['question'])
        question_label.pack(pady=10)

        for option in self.question_data['options']:
            button = ctk.CTkButton(self, text=option, command=lambda opt=option: self.check_answer(opt))
            button.pack(pady=5)

    def check_answer(self, selected_option):
        self.destroy()
        self.check_answer_callback(selected_option)

if __name__ == "__main__":
    ctk.set_appearance_mode("Light")
    ctk.set_default_color_theme("blue")

    app = AnatomyApp()
    app.mainloop()

